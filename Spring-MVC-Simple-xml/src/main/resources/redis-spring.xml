<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
                        http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">

    <!-- 基于 Redis XML 的配置 -->
    <!-- https://docs.spring.io/spring-session/docs/current/reference/html5/#httpsession-xml-spring-configuration -->
    <!-- Spring Session 由 Redis 支持 -->
    <context:annotation-config/>


    <!-- 使用注解驱动，其中属性 cache-manager：默认值为：cacheManager，参见：http://www.springframework.org/schema/cache/spring-cache.xsd -->
    <!-- 如果名称相同，可缺省 -->
    <cache:annotation-driven cache-manager="redisCacheManager"/>

    <!-- 缓存管理器 -->
    <bean id="redisCacheManager"
          class="org.springframework.data.redis.cache.RedisCacheManager"
          c:template-ref="redisTemplate"/>

    <!-- 开启 Redis Session 缓存 -->
    <bean class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration"/>

    <!-- 连接池：LettuceConnectionFactory、JedisConnectionFactory 二选一 -->

    <!-- 创建一个 RedisConnectionFactory 将 Spring Session 连接到 Redis Server -->
    <!-- 将连接配置为在默认端口（6379）上连接到 localhost。有关配置 Spring Data Redis 的更多信息，请参见参考文档 -->
    <!-- 使用此连接池需要引入：com.lambdaworks 的 lettuce，否则 Caused by: java.lang.ClassNotFoundException: com.lambdaworks.redis.RedisException -->
    <!-- lettuce-core 非必须 -->
    <!-- https://docs.spring.io/spring-data/data-redis/docs/2.2.0.RELEASE/reference/html/ -->
    <bean id="lettuceConnectionFactory"
          class="org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory"
          p:hostName="${redis.host-name}"
          p:port="${redis.port}"
          p:database="${redis.database}"/>

    <!-- https://docs.spring.io/spring-data/data-redis/docs/current/reference/html/#redis:template -->
    <!-- https://docs.spring.io/spring-data/data-redis/docs/current/reference/html/#redis:string -->
    <!--<bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
          p:use-pool="true"
          p:hostName="${redis.host-name}"
          p:port="${redis.port}"
          p:database="${redis.database}"/>-->

    <!-- 通过 RedisTemplate 处理对象 -->
    <!-- 字符串 -->
    <!-- Redis 模板定义 -->
    <!-- p:connection-factory-ref：根据连接池配置 -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate"
          p:connection-factory-ref="lettuceConnectionFactory"
          p:keySerializer-ref="keySerializer"
          p:valueSerializer-ref="valueSerializer"
          init-method="afterPropertiesSet"/>

    <!--  -->
    <bean id="keySerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer"/>

    <!--  -->
    <bean id="valueSerializer" class="org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer"
          c:type="java.lang.Object"
          p:objectMapper-ref="objectMapper"/>

    <!-- 使用自定义序列化 -->
    <bean id="objectMapper" class="cn.com.xuxiaowei.util.CustomObjectMapper" factory-method="defaultObjectMapper"/>

</beans>